version: '3.8'

services:
  initro-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: initro-multi-agent
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-3.5-turbo}
      - DATABASE_URL=sqlite:///app/data/initro.db
      - CHROMA_PERSIST_DIRECTORY=/app/memory_store
    volumes:
      - ./uploads:/app/uploads
      - ./memory_store:/app/memory_store
      - ./logs:/app/logs
      - initro_data:/app/data
    depends_on:
      - redis
      - postgres
    networks:
      - initro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: initro-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - initro-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: initro-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=initro
      - POSTGRES_USER=initro_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-initro_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - initro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U initro_user -d initro"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: initro-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
    depends_on:
      - initro-app
    networks:
      - initro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: initro-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - initro-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: initro-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - initro-network
    restart: unless-stopped

  # Development services (uncomment for development)
  # initro-dev:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   container_name: initro-dev
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     - FLASK_ENV=development
  #     - FLASK_DEBUG=1
  #   volumes:
  #     - .:/app
  #     - /app/__pycache__
  #   networks:
  #     - initro-network
  #   command: python app.py

volumes:
  initro_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  initro-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16